package com.grudnov.lessons.exam.quest_game;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

public class StepQuest {

    private static int id = 0;
    private static final String[] titles = {
      "Лисенок","Вернуться домой","Отправиться на поиски",
            "Попытаться разузнать о Бельчонке у лесных жителей",
            "Искать Бельчонка в одиночку","Расспросить Сову","Расспросить Волка",
            "Поверить Сове и отправиться в глубь леса",
            "Нужно воспользоваться шансом и раздобыть мёд","Подождать, вдруг пчёлы улетят",
            "Нужно попытаться выкрасть мёд немедленно", "Поесть немного и передохнуть",
            "Скорее отнести мёд Медвежонку"

    };
    private static final String[] descriptions = {
            "Каждое утро Лисёнок просыпался, завтракал и шёл увидеться с Бельчонком. Это утро не было исключением.\n" +
                    " Лисёнок пришёл на их обычное место встречи, но Бельчонка там не было.\n" +
                    " Лисёнок ждал, ждал, но так и не смог дождаться своего друга. \"Бельчонок не пропустил еще ни\n" +
                    " одной встречи, вдруг он попал в беду.\" - подумал Лисёнок. Как поступить Лисенку?",
            "Вернувшись домой, Лисёнок нашёл там Бельчонка. Оказалось, что Бельчонок пришёл на место встречи раньше\n" +
                    " и увидел там рой злобных пчел. Он поспешил предупредить об этом Лисёнка, но они разминулись.\n" +
                    " Наконец-то друзья нашли друг друга! Игра завершилась успехом",
            "Все лесные жители были заняты своими делами и не обращали внимания на Лисёнка и его проблему.\n" +
                    " Но вдруг кто нибудь видел Бельчонка... Лисёнок не знал, что ему делать. Помогите ему.",
            "Пока Лисёнок принимал решение, лесные жители разошлись кто куда. Остались только Сова и Волк.\n" +
                    " Но у Совы бывают проблемы с памятью, а Волк может сильно разозлиться из-за расспросов. Кого выбрать?",
            "Лисёнок слишком долго плутал по лесу в поисках друга и сам не заметил, как заблудился.\n" +
                    " Теперь его самого нужно искать. Игра завершилась неудачей",
            "Сова долго не хотела говорить, но в итоге сказала, что видела испуганного Бельчонка, бежавшего в глубь леса.\n" +
                    " Все лесные жители знают, что в глубине леса опасно, если Бельчонок там, ему срочно нужна помощь.",
            "Волк оказался вполне дружелюбным, но помочь не смог. Лишь сказал, что маленькому лисенку не стоит\n" +
                    " бродить по лесу одному. И как теперь поступить?",
            "В глубине леса Лисёнок встретил Медвежонка. Ленивый Медвежонок был готов рассказать все, что знает,\n" +
                    " если Лисёнок принесёт ему мёда.",
            "Лисёнок быстро нашёл мёд, но вокруг летал рой злобных пчел. Лисёнок всегда боялся пчёл,\n" +
                    " но и не найти друга он тоже боялся.",
            "Лисёнок подождал немного, и пчёлы разлетелись. Лисёнок без проблем набрал мёда. Вдруг он понял,\n" +
                    " что очень голоден. Что же делать?",
            "Это была не лучшая идея. Пчёлы покусали Лисёнка, теперь ему самому нужна помощь. Игра закончилась неудачей",
            "Пока Лисёнок ел, злобные пчёлы вернулись и покусали его. Лисёнку нужна помощь, он не сможет продолжить\n" +
                    " поиски. Игра завершилась неудачей",
            "Довольный Медвежонок рассказал Лисёнку, что очень хорошо знает семью Белок и уверен, что Бельчонок никогда\n" +
                    " не пошёл бы в глубь леса. Он заверял Лисёнка, что Белки не попадают в неприятности, и что Совам\n" +
                    " нельзя верить, он также уговаривал Лисёнка вернуться домой."

    };
    private static final String[] solutions = {
            /* 0 */"Лисенок", "Лисенок",
            /* 2 */"Вернуться домой", "Вернуться домой",
            /* 4 */"Отправиться на поиски", "Отправиться на поиски",
            /* 6 */"Попытаться разузнать о Бельчонке у лесных жителей","Попытаться разузнать о Бельчонке у лесных жителей",
            /* 8 */"Искать Бельчонка в одиночку", "Искать Бельчонка в одиночку",
            /* 10 */"Расспросить Сову", "Расспросить Сову",
            /* 12*/"Расспросить Волка", "Расспросить Волка",
            /* 14 */"Поверить Сове и отправиться в глубь леса", "Поверить Сове и отправиться в глубь леса",
            /* 16 */"Сове не стоит верить", "Искать Бельчонка в одиночку",
            /* 18 */"Волк прав","Вернуться домой",
            /* 20 */"Нет, потрачено слишком много времени, нужно идти дальше","Искать Бельчонка в одиночку",
            /* 22 */"Нужно воспользоваться шансом и раздобыть мёд", "Нужно воспользоваться шансом и раздобыть мёд",
            /* 24 */"Подождать, вдруг пчёлы улетят", "Подождать, вдруг пчёлы улетят",
            /* 26 */"Нужно попытаться выкрасть мёд немедленно", "Нужно попытаться выкрасть мёд немедленно",
            /* 28 */"Поесть немного и передохнуть", "Поесть немного и передохнуть",
            /* 30 */"Скорее отнести мёд Медвежонку", "Скорее отнести мёд Медвежонку",
            /* 32 */"Межвежонок ничего не знает, нужно продолжить поиски", "Искать Бельчонка в одиночку",
            /* 34 */"Может быть он прав и Лисёнок просто паникует", "Вернуться домой",
            /* 36 */"Вы выиграли", "Вы выиграли",
            /* 38 */"Вы проиграли", "Вы проиграли"
    };

    private static final Map<String, StepQuest> allSteps = new HashMap<>();

    private String title;
    private String description;
    private String solution_1;
    private String solution_2;
    private String keySolution_1;
    private String keySolution_2;

    private StepQuest(String solution_1, String solution_2) {
        this.solution_1 = solution_1;
        this.solution_2 = solution_2;
    }

    public static void createStepQuest(int solution_1, int solution_2){
        StepQuest stepQuest = new StepQuest(solutions[solution_1], solutions[solution_2] );
        stepQuest.keySolution_1 = solutions[++solution_1];
        stepQuest.keySolution_2 = solutions[++solution_2];
        stepQuest.title = titles[id];
        stepQuest.description = descriptions[id];
        id++;
        allSteps.put(stepQuest.title, stepQuest);
    }

    public String getDescription() {
        return description;
    }

    public String getSolution_1() {
        return solution_1;
    }

    public String getSolution_2() {
        return solution_2;
    }

    public String getKeySolution_1() {
        return keySolution_1;
    }

    public String getKeySolution_2() {
        return keySolution_2;
    }

    public static Map<String, StepQuest> getAllStepsQuest(){
        return allSteps;
    }

    public static StepQuest getStepQuestBySolution(String solution){
Optional<Map.Entry<String, StepQuest>> optional =  allSteps.entrySet().stream().filter(step ->
                step.getValue().solution_1.equals(solution)).findFirst();
if(optional.isEmpty()){
    optional =  allSteps.entrySet().stream().filter(step ->
            step.getValue().solution_2.equals(solution)).findFirst();
}
return allSteps.get(optional.get().getKey());

    }
}
